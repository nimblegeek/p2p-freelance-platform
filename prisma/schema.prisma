generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String?
  userType          UserType
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  profile           Profile?
  jobsPosted        Job[]     @relation("JobPoster")
  applications      JobApplication[]
  messages          Message[]
  businessVerification BusinessVerification?
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?
  session_state    String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model BusinessVerification {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationNumber String    @unique
  companyName       String
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt        DateTime?
  submittedAt       DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  documents         Json?
  notes             String?
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  skills        String? // Comma-separated list
  hourlyRate    Float?
  availability  Boolean   @default(true)
  portfolio     Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Job {
  id            String    @id @default(cuid())
  title         String
  description   String
  budget        Float
  skills        String? // Comma-separated list
  status        JobStatus @default(OPEN)
  posterId      String
  poster        User      @relation("JobPoster", fields: [posterId], references: [id])
  applications  JobApplication[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model JobApplication {
  id            String    @id @default(cuid())
  jobId         String
  job           Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicantId   String
  applicant     User      @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  proposal      String
  status        ApplicationStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id            String    @id @default(cuid())
  content       String
  senderId      String
  sender        User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  jobId         String?
  createdAt     DateTime  @default(now())
}

enum UserType {
  CLIENT
  FREELANCER
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model WaitlistEntry {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String?
  lastName      String?
  companyName   String?
  userType      UserType
  interests     String?   // Comma-separated list of interests or skills
  source        String?   // How they found us
  notes         String?   // Admin notes
  status        WaitlistStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastContactedAt DateTime?
}

enum WaitlistStatus {
  PENDING    // Just signed up
  CONTACTED  // We've reached out
  RESPONDED  // They've responded to our contact
  INVITED    // Invited to join the platform
  JOINED     // Converted to full user
  DECLINED   // Not interested
}
